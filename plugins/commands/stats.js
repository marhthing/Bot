/**
 * MATDEV Stats Command
 * Display comprehensive bot statistics and performance metrics
 */

const os = require('os');

module.exports = {
    name: 'stats',
    version: '1.0.0',
    description: 'MATDEV Statistics - Comprehensive bot performance metrics',
    commands: [{
        name: 'stats',
        aliases: ['statistics', 'info', 'status'],
        category: 'general',
        description: 'Display comprehensive bot statistics and performance metrics',
        usage: '.stats [detailed]',
        examples: ['.stats', '.stats detailed'],
        
        async handler(context) {
            const { args, reply, client } = context;
            const isDetailed = args[0] === 'detailed';
            
            if (isDetailed) {
                await this.showDetailedStats(context, client);
            } else {
                await this.showBasicStats(context, client);
            }
        },
        
        async showBasicStats(context, client) {
            const { reply } = context;
            const stats = client.getStats();
            const memUsage = process.memoryUsage();
            const uptime = process.uptime() * 1000;
            
            const statsMessage = `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                   üìä MATDEV BOT STATISTICS                  ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ü§ñ Bot Name         : MATDEV v1.0                          ‚îÇ
‚îÇ üïê Uptime           : ${this.formatDuration(uptime)}                    ‚îÇ
‚îÇ üîå Status           : ${stats.isConnected ? 'üü¢ Online' : 'üî¥ Offline'}                     ‚îÇ
‚îÇ üì® Messages Sent    : ${(stats.messagesSent || 0).toLocaleString()}                         ‚îÇ
‚îÇ üì• Messages Received: ${(stats.messagesReceived || 0).toLocaleString()}                         ‚îÇ
‚îÇ ‚ö° Commands Executed: ${(stats.commandsExecuted || 0).toLocaleString()}                         ‚îÇ
‚îÇ üíæ Memory Usage     : ${Math.round(memUsage.heapUsed / 1024 / 1024)} MB              ‚îÇ
‚îÇ üîå Plugins Loaded   : ${client.pluginLoader.getLoadedCount()}                           ‚îÇ
‚îÇ üìã Available Commands: ${client.pluginLoader.getCommandCount()}                         ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

*Performance Rating:* ${this.getPerformanceRating(memUsage, uptime)}
*Last Activity:* ${this.getLastActivity(stats.lastActivity)}

Use \`.stats detailed\` for comprehensive metrics`;

            await reply(statsMessage);
        },
        
        async showDetailedStats(context, client) {
            const { reply } = context;
            const stats = client.getStats();
            const memUsage = process.memoryUsage();
            const cpus = os.cpus();
            const loadAvg = os.loadavg();
            const uptime = process.uptime() * 1000;
            
            // Get plugin statistics
            const pluginStats = client.pluginLoader.getPluginStats();
            
            // Get performance metrics if available
            let performanceMetrics = '';
            if (client.performanceMonitor) {
                const perfReport = client.performanceMonitor.getMetricsReport();
                performanceMetrics = `
*üìà PERFORMANCE METRICS*
‚îú Average Response Time: ${perfReport.averageResponseTime}ms
‚îú Peak Memory Usage: ${Math.max(...(perfReport.memory ? [perfReport.memory.heapUsed] : [0]))} MB
‚îú Error Rate: ${perfReport.errors}/${perfReport.messages} (${perfReport.messages > 0 ? Math.round((perfReport.errors / perfReport.messages) * 100) : 0}%)
‚îú Commands Per Hour: ${Math.round((perfReport.commands / (perfReport.uptime / 3600000)) || 0)}
`;
            }
            
            const detailedStats = `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                 üìä DETAILED MATDEV STATISTICS               ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

*ü§ñ BOT INFORMATION*
‚îú Name: MATDEV WhatsApp Bot
‚îú Version: 1.0.0
‚îú Uptime: ${this.formatDuration(uptime)}
‚îú Status: ${stats.isConnected ? 'üü¢ Connected' : 'üî¥ Disconnected'}
‚îú Last Activity: ${this.getLastActivity(stats.lastActivity)}

*üìä MESSAGE STATISTICS*
‚îú Messages Sent: ${(stats.messagesSent || 0).toLocaleString()}
‚îú Messages Received: ${(stats.messagesReceived || 0).toLocaleString()}
‚îú Commands Executed: ${(stats.commandsExecuted || 0).toLocaleString()}
‚îú Success Rate: ${this.calculateSuccessRate(stats)}%

*üíæ MEMORY USAGE*
‚îú Heap Used: ${Math.round(memUsage.heapUsed / 1024 / 1024)} MB
‚îú Heap Total: ${Math.round(memUsage.heapTotal / 1024 / 1024)} MB
‚îú External: ${Math.round(memUsage.external / 1024 / 1024)} MB
‚îú RSS: ${Math.round(memUsage.rss / 1024 / 1024)} MB

*üñ•Ô∏è SYSTEM INFORMATION*
‚îú Platform: ${os.platform()} ${os.arch()}
‚îú Node.js: ${process.version}
‚îú CPU Cores: ${cpus.length}x ${cpus[0]?.model || 'Unknown'}
‚îú Load Average: ${loadAvg.map(l => l.toFixed(2)).join(', ')}
‚îú Free Memory: ${Math.round(os.freemem() / 1024 / 1024)} MB
‚îú Total Memory: ${Math.round(os.totalmem() / 1024 / 1024)} MB

*üîå PLUGIN STATISTICS*
‚îú Total Plugins: ${pluginStats.totalPlugins}
‚îú Total Commands: ${pluginStats.totalCommands}
‚îú Plugin Load Time: ${pluginStats.loadTime}ms
${performanceMetrics}
*üõ°Ô∏è SECURITY STATUS*
‚îú Session Health: ${client.sessionManager ? 'üü¢ Healthy' : 'üî¥ Unhealthy'}
‚îú Auto Backup: ${context.config?.SESSION_BACKUP_INTERVAL > 0 ? 'üü¢ Enabled' : 'üî¥ Disabled'}
‚îú Rate Limiting: üü¢ Active
‚îú Permission System: üü¢ Active

*Powered by MATDEV Team 2025*`;

            await reply(detailedStats);
        },
        
        formatDuration(milliseconds) {
            const seconds = Math.floor(milliseconds / 1000);
            const minutes = Math.floor(seconds / 60);
            const hours = Math.floor(minutes / 60);
            const days = Math.floor(hours / 24);
            
            if (days > 0) {
                return `${days}d ${hours % 24}h ${minutes % 60}m`;
            } else if (hours > 0) {
                return `${hours}h ${minutes % 60}m`;
            } else if (minutes > 0) {
                return `${minutes}m ${seconds % 60}s`;
            } else {
                return `${seconds}s`;
            }
        },
        
        getLastActivity(timestamp) {
            if (!timestamp) return 'Never';
            
            const diff = Date.now() - timestamp;
            const seconds = Math.floor(diff / 1000);
            
            if (seconds < 60) {
                return `${seconds}s ago`;
            } else if (seconds < 3600) {
                return `${Math.floor(seconds / 60)}m ago`;
            } else if (seconds < 86400) {
                return `${Math.floor(seconds / 3600)}h ago`;
            } else {
                return `${Math.floor(seconds / 86400)}d ago`;
            }
        },
        
        getPerformanceRating(memUsage, uptime) {
            const memUsageMB = memUsage.heapUsed / 1024 / 1024;
            const uptimeHours = uptime / (1000 * 60 * 60);
            
            if (memUsageMB < 100 && uptimeHours > 24) {
                return '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê Excellent';
            } else if (memUsageMB < 200 && uptimeHours > 12) {
                return '‚≠ê‚≠ê‚≠ê‚≠ê Very Good';
            } else if (memUsageMB < 300 && uptimeHours > 6) {
                return '‚≠ê‚≠ê‚≠ê Good';
            } else if (memUsageMB < 400) {
                return '‚≠ê‚≠ê Fair';
            } else {
                return '‚≠ê Needs Optimization';
            }
        },
        
        calculateSuccessRate(stats) {
            const total = (stats.messagesSent || 0) + (stats.messagesReceived || 0);
            if (total === 0) return 100;
            
            const errors = stats.errorCount || 0;
            return Math.round(((total - errors) / total) * 100);
        }
    }]
};
